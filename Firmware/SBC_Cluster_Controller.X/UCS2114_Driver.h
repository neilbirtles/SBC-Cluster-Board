/* 
 * File:                UCS2114_Driver.h
 * Author:              Birty
 * Comments:            Includes pull through of the Microchip driver header 
 *                      file generated by MCC. That doesnt work with the latest
 *                      MCC generated I2C code. This has been adapted to work
 *                      
 * Revision history: 
 */

// This is a guard condition so that contents of this file are not included
// more than once.  
#ifndef UCS2114_DRIVER_H
#define	UCS2114_DRIVER_H

/**
  Section: Included Files
*/
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <xc.h>
#include "./mcc_generated_files/i2c1_master.h"

// UCS2114 SMBus 7bit address
#define UCS2114_ADDRESS  0x57

// UCS2114 register addresses
#define UCS2114_REG_PORT2_CURRENT_MEASUREMENT                           0x00
#define UCS2114_REG_PORT1_CURRENT_MEASUREMENT                           0x01
#define UCS2114_REG_PORT_STATUS                                         0x02
#define UCS2114_REG_INTERRUPT_STATUS2                                   0x03
#define UCS2114_REG_INTERRUPT_STATUS1                                   0x04
#define UCS2114_REG_GENERAL_STATUS2                                     0x0F
#define UCS2114_REG_GENERAL_STATUS1                                     0x10
#define UCS2114_REG_GENERAL_CONFIGURATION2                              0x11
#define UCS2114_REG_GENERAL_CONFIGURATION1                              0x12
#define UCS2114_REG_GENERAL_CONFIGURATION3                              0x13
#define UCS2114_REG_CURRENT_LIMIT                                       0x14
#define UCS2114_REG_AUTO_RECOVERY_CONFIGURATION                         0x15
#define UCS2114_REG_PORT2_TOTAL_ACCUMULATED_CHARGE_HIGH_BYTE            0x16
#define UCS2114_REG_PORT2_TOTAL_ACCUMULATED_CHARGE_MIDDLE_HIGH_BYTE     0x17
#define UCS2114_REG_PORT2_TOTAL_ACCUMULATED_CHARGE_MIDDLE_LOW_BYTE      0x18
#define UCS2114_REG_PORT2_TOTAL_ACCUMULATED_CHARGE_LOW_BYTE             0x19
#define UCS2114_REG_PORT1_TOTAL_ACCUMULATED_CHARGE_HIGH_BYTE            0x1A
#define UCS2114_REG_PORT1_TOTAL_ACCUMULATED_CHARGE_MIDDLE_HIGH_BYTE     0x1B
#define UCS2114_REG_PORT1_TOTAL_ACCUMULATED_CHARGE_MIDDLE_LOW_BYTE      0x1C
#define UCS2114_REG_PORT1_TOTAL_ACCUMULATED_CHARGE_LOW_BYTE             0x1D
#define UCS2114_REG_PORT2_CHARGE_RATIONING_THRESHOLD_HIGH_BYTE          0x1E
#define UCS2114_REG_PORT2_CHARGE_RATIONING_THRESHOLD_LOW_BYTE           0x1F
#define UCS2114_REG_PORT1_CHARGE_RATIONING_THRESHOLD_HIGH_BYTE          0x20
#define UCS2114_REG_PORT1_CHARGE_RATIONING_THRESHOLD_LOW_BYTE           0x21
#define UCS2114_REG_RATION_CONFIGURATION                                0x22
#define UCS2114_REG_PORT2_CURRENT_LIMIT_BEHAVIOR                        0x23
#define UCS2114_REG_PORT1_CURRENT_LIMIT_BEHAVIOR                        0x24
#define UCS2114_REG_PRODUCT_ID                                          0xFD
#define UCS2114_REG_MANUFACTURER_ID                                     0xFE
#define UCS2114_REG_REVISION                                            0xFF

// UCS2114 Product ID register value
#define UCS2114_PRODUCT_ID_VAL  0xE3

/**
 Section: Data Type Definitions
*/

////****************TEMP ENUM TO GET STUFF TO COMPILE****************
////*************************REMOVE**********************************
//typedef enum {
//    I2C1_MESSAGE_PENDING
//}I2C1_MESSAGE_STATUS;
 

/**
  UCS2114 8 bit register type.

  @Summary
    Specifies the bit and register names as they appear in UCS2114 data sheet.

  @Description
    This union type includes all the register names and their bits. 
    The size of the union is 1 byte. 
 */

typedef union
{
    //For accessing the entire byte
    uint8_t byte_val;
    
    //For accessing individual bits by their position
    struct
    {
        uint8_t b0:1;
        uint8_t b1:1;
        uint8_t b2:1;
        uint8_t b3:1;
        uint8_t b4:1;
        uint8_t b5:1;
        uint8_t b6:1;
        uint8_t b7:1;
    } bits;
    
    /*The following structures represent the UCS2114 register and bit names 
    as specified in the data sheet. 
    The Current Measurement, Total Accumulated Charge and Charge Rationing 
    Threshold registers are not included here because they are different than
    the other registers and they must to be handled as a whole, not as separate 
    bits. */
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
        uint8_t cc_mode2:1;
        uint8_t cc_mode1:1;
        uint8_t alert2_pin:1;
        uint8_t alert1_pin:1;
    } port_status_bits;
    
    struct
    {
        uint8_t ov_lim2:1;
        uint8_t back_v2:1;
        uint8_t ov_volt:1;
        uint8_t tsd_high:1;
        uint8_t keep_out2:1;
        uint8_t reset:1;
        uint8_t disch_err2:1;
        uint8_t err2:1;
    } interrupt_status2_bits;  
    
    struct
    {
        uint8_t ov_lim1:1;
        uint8_t back_v1:1;
        uint8_t :1;
        uint8_t tsd_low:1;
        uint8_t keep_out1:1;
        uint8_t vs_low:1;
        uint8_t disch_err1:1;
        uint8_t err1:1;
    } interrupt_status1_bits; 
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
        uint8_t pwr_en2_con:1;
        uint8_t cc_mode2:1;
        uint8_t :1;
        uint8_t :1;
        uint8_t ration2:1;
    } general_status2_bits; 
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
        uint8_t pwr_en1_con:1;
        uint8_t cc_mode1:1;
        uint8_t :1;
        uint8_t :1;
        uint8_t ration1:1;
    } general_status1_bits;
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t dischg_time:2;
        uint8_t pwr_en2s:1;
        uint8_t dschg2:1;
        uint8_t :1;
        uint8_t alert2_mask:1;
    } general_configuration2_bits;    
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t en_vbus_dischg:1;
        uint8_t :1;
        uint8_t pwr_en1s:1;
        uint8_t dschg1:1;
        uint8_t :1;
        uint8_t alert1_mask:1;
    } general_configuration1_bits;    
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t boost:1;
        uint8_t :1;
        uint8_t :1;
        uint8_t dis_to:1;
        uint8_t :1;
        uint8_t pin_ign:1;
    } general_configuration3_bits;   
    
    struct
    {
        uint8_t ilim_port2:3;
        uint8_t ilim_port1:3;
        uint8_t :1;
        uint8_t :1;
    } current_limit_bits;    
    
    struct
    {
        uint8_t vtst_sw:2;
        uint8_t ttst:2;
        uint8_t tcycle:3;
        uint8_t latchs:1;
    } auto_recovery_configuration_bits;    

    struct
    {
        uint8_t rtn_beh2:2;
        uint8_t rtn_rst2:1;
        uint8_t rtn_en2:1;
        uint8_t rtn_beh1:2;
        uint8_t rtn_rst1:1;
        uint8_t rtn_en1:1;
    } ration_configuration_bits;  
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t sel_r2_imin2:3;
        uint8_t dischg_load2:1;
        uint8_t sel_vbus2_min:2;
    } port2_current_limit_behavior_bits;  
    
    struct
    {
        uint8_t :1;
        uint8_t :1;
        uint8_t sel_r2_imin1:3;
        uint8_t dischg_load1:1;
        uint8_t sel_vbus1_min:2;
    } port1_current_limit_behavior_bits; 
    
} UCS2114_REGISTER;

typedef union
{
    struct
    {
        uint8_t alert1_pin:1;
        uint8_t alert2_pin:1;
        uint8_t cc_mode1:1;
        uint8_t cc_mode2:1;
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
    } UCS2114_port_status_reg_bits;
    
    //For accessing the entire byte
    uint8_t byte_val;
    
}UCS2114_port_status_reg;

typedef union 
{
    struct
    {
        uint8_t err2:1;
        uint8_t disch_err2:1;
        uint8_t reset:1;
        uint8_t keep_out2:1;
        uint8_t tsd_high:1;
        uint8_t ov_volt:1;
        uint8_t back_v2:1;
        uint8_t ov_lim2:1;
    } UCS2114_interrupt_status_2_reg_bits;
    
    //For accessing the entire byte
    uint8_t byte_val;
    
}UCS2114_interrupt_status_2_reg;

typedef union
{
    struct
    {
        uint8_t err1:1;
        uint8_t disch_err1:1;
        uint8_t vs_low:1;
        uint8_t keep_out1:1;
        uint8_t tsd_low:1;
        uint8_t :1;
        uint8_t back_v1:1;
        uint8_t ov_lim1:1;
    }UCS2114_interrupt_status_1_reg_bits;
    
    //For accessing the entire byte
    uint8_t byte_val;
    
}UCS2114_interrupt_status_1_reg;

typedef union 
{
    struct
    {
        uint8_t ration:1;
        uint8_t :1;
        uint8_t :1;
        uint8_t cc_mode:1;
        uint8_t pwr_en_con:1;
        uint8_t :1;
        uint8_t :1;
        uint8_t :1;
    }UCS2114_general_status_reg_bits;
    
    //For accessing the entire byte
    uint8_t byte_val;
}UCS2114_general_status_reg;

/*
    Section: Routines for writing specific bits UCS2114 registers.
    These functions modify certain bits in the static global variables that 
    store the values of the UCS2114 registers and write the
    new value to the register. 
    These are blocking functions if the previous I2C transfer has not been 
    completed.
*/

/** @Name: UCS2114setPWR_ENpinsIgnore
 * 
    @Summary
        Sets the PIN_IGN bit from the General Configuration 3 register. 
 * 
    @Returns
        none
*/
void UCS2114setPWR_ENpinsIgnore(void);
        

/** @Name: UCS2114clearPWR_ENpinsIgnore
 * 
    @Summary
        Clears the PIN_IGN bit from the General Configuration 3 register.   

    @Returns
        none
*/
void UCS2114clearPWR_ENpinsIgnore(void);       
        

/** @Name: UCS2114setPWR_EN1bit
 * 
    @Summary
        Sets the PWR_EN1S bit from the General Configuration 1 register. 

    
    @Returns
        none
*/
void UCS2114setPWR_EN1bit(void); 


/** @Name: UCS2114clearPWR_EN1bit
 * 
    @Summary
        Clears the PWR_EN1S bit from the General Configuration 1 register. 
 * 
    @Returns
        none
*/
void UCS2114clearPWR_EN1bit(void);


/** @Name: UCS2114setPWR_EN2bit
 * 
    @Summary
        Sets the PWR_EN2S bit from the General Configuration 2 register. 

    @Returns
        none
*/

void UCS2114setPWR_EN2bit(void); 


/** @Name: UCS2114clearPWR_EN2bit
 * 
    @Summary
        Clears the PWR_EN2S bit from the General Configuration 2 register. 

    @Returns
        none
*/

void UCS2114clearPWR_EN2bit(void);



/** @Name: UCS2114setCurrentLimit
 * 
    @Summary
        Sets the current limits on the two ports. 

    @Description
        This function writes the Current Limit register with the current limits
        for the two ports.
 
    @Param
        ilimPort1 - Current Limit on Port 1 (values from 0 to 7 - according to 
                    the UCS2114 datasheet)
 
    @Param
        ilimPort2 - Current Limit on Port 2 (values from 0 to 7 - according to 
                    the UCS2114 datasheet)  

    @Returns
        none
*/
void UCS2114setCurrentLimit(uint8_t ilimPort1, uint8_t ilimPort2);


/** @Name: UCS2114setDISCHG_LOAD1bit
 * 
    @Summary
        Sets the DISCHG_LOAD1 bit from the Port 1 Current Limit Behavior 
        register. 

    @Returns
        none
*/

void UCS2114setDISCHG_LOAD1bit(void);  


/** @Name: UCS2114clearDISCHG_LOAD1bit
 * 
    @Summary
        Clears the DISCHG_LOAD1 bit from the Port 1 Current Limit Behavior 
        register. 

    @Returns
        none
*/

void UCS2114clearDISCHG_LOAD1bit(void);


/** @Name: UCS2114setDISCHG_LOAD2bit
 * 
    @Summary
        Sets the DISCHG_LOAD2 bit from the Port 2 Current Limit Behavior 
        register. 

    @Returns
        none
*/

void UCS2114setDISCHG_LOAD2bit(void);  


/** @Name: UCS2114clearDISCHG_LOAD2bit
 * 
    @Summary
        Clears the DISCHG_LOAD2 bit from the Port 2 Current Limit Behavior 
        register. 

    @Returns
        none
*/

void UCS2114clearDISCHG_LOAD2bit(void);


/** @Name: UCS2114_is_connected
 * 
    @Summary
        Checks the connection with the UCS2114 by reading the Product ID 
        register. 

    @Description
        This function reads the Product ID register. If the value cannot be read
        or if the read value is not the expected one, then false is returned.

    @Returns
        bool    false if the device cant be read or the ID is wrong
                true if the device ID is correct
*/
bool UCS2114_is_connected(void);


/** @Name: UCS2114initialize
 * 
    @Summary
        Initialize the UCS2114 by writing the configuration registers with the 
    values computed based on selections made by the user in the MPLAB Code 
    Configurator graphical interface (UCS2114 module window).

    @Description
        This function writes the UCS2114 Configuration registers with fixed
        values.
        
    @Returns
        none
*/
void UCS2114initialize(void);

/** @Name: UCS2114_port_one_current
 * 
    @Summary 
        Gets the current current consumption for port one

    @Returns
        Current consumption for port one
*/
uint8_t UCS2114_get_port_one_current(void);


/** @Name: UCS2114_port_two_current
 * 
    @Summary 
        Gets the current current consumption for port two

    @Returns
        Current consumption for port two
*/
uint8_t UCS2114_get_port_two_current(void);

UCS2114_port_status_reg UCS2114_get_port_status_reg(void);

UCS2114_interrupt_status_1_reg UCS2114_get_interrupt_status_1_reg(void);

UCS2114_interrupt_status_2_reg UCS2114_get_interrupt_status_2_reg(void);

UCS2114_general_status_reg UCS2114_get_general_status_1_reg(void);

UCS2114_general_status_reg UCS2114_get_general_status_2_reg(void);


#endif	/* UCS2114_DRIVER_H */

